.MODEL SMALL
.STACK
.DATA
TABLE_SIZE EQU 169
TAB DB TABLE_SIZE DUP (?)

B DB 11001010b
C DB 11100010b
B_ENC DB ?
C_ENC DB ?
DELTA_DEC DB ?
X1_DEC DB ?
X2_DEC DB ?

X1 DB ?
X2 DB ?

DIGIT DB 3 DUP (?)
.CODE
.STARTUP
MAIN:
	CALL INIT_TABLE
	CALL DECODE_NUMBERS
	CALL CALCULATE
	CALL ENCODE_RESULTS
.EXIT

ENCODE_RESULTS PROC
	PUSHA
	XOR AH, AH
	MOV AL, X1_DEC
	CMP AL, 0
	JL X1_NEG
	; X1 positive if here
		MOV BH, 0
		JMP X1_SIGN
	X1_NEG:
		NEG AL
		MOV BH, 11b
	X1_SIGN:
	MOV BL, 9
	DIV BL
	SHL BH, 2
	ADD BH, AL
	MOV AL, AH
	XOR AH, AH
	MOV BL, 3
	DIV BL
	SHL BH, 2
	ADD BH,  AL
	MOV AL, AH
	XOR AH, AH
	SHL BH, 2
	ADD BH, AL
	
	MOV X1, BH
	
	XOR AH, AH
	MOV AL, X2_DEC
	CMP AL, 0
	JL X2_NEG
	; X1 positive if here
		MOV BH, 0
		JMP X2_SIGN
	X2_NEG:
		NEG AL
		MOV BH, 11b
	X2_SIGN:
	MOV BL, 9
	DIV BL
	SHL BH, 2
	ADD BH, AL
	MOV AL, AH
	XOR AH, AH
	MOV BL, 3
	DIV BL
	SHL BH, 2
	ADD BH,  AL
	MOV AL, AH
	XOR AH, AH
	SHL BH, 2
	ADD BH, AL
	
	MOV X2, BH
	
	POPA
	RET
ENCODE_RESULTS ENDP

CALCULATE PROC
	PUSHA
	MOV AL, B_ENC
	IMUL AL
	MOV BL, C_ENC
	SAL BL, 2
	SUB AL, BL
	
	XOR AH, AH
	MOV SI, AX					; Index to retrieve square root
	MOV DL, TAB[SI]				; Square root in ternary digits

	XOR BH, BH
	MOV BL, DL
	AND BL, 03h
	SHR DL, 2
	MOV AL, DL
	AND AL, 03h
	MOV AH, 3
	MUL AH
	ADD BX, AX
	SHR DL, 2
	MOV AL, DL
	AND AL, 03h
	MOV AH, 9
	MUL AH
	ADD BX, AX
	MOV DELTA_DEC, BL	
	
	MOV AL, B_ENC
	IMUL AL
	MOV BL, C_ENC
	SAL BL, 2
	ADD AL, BL
	
	MOV BL, B_ENC
	NEG BL						; -b
	SUB BL, DELTA_DEC			; -b - delta
	SAR BL, 1					; div 2
	MOV X1_DEC, BL
	
	MOV BL, B_ENC
	NEG BL						; -b
	ADD BL, DELTA_DEC			; -b + delta
	SAR BL, 1					; div 2
	MOV X2_DEC, BL
		
	POPA
	RET
CALCULATE ENDP

DECODE_NUMBERS PROC
	PUSHA
	MOV DL, B
	XOR BH, BH
	MOV BL, DL
	AND BL, 03h
	SHR DL, 2
	MOV AL, DL
	AND AL, 03h
	MOV AH, 3
	MUL AH
	ADD BX, AX
	SHR DL, 2
	MOV AL, DL
	AND AL, 03h
	MOV AH, 9
	MUL AH
	ADD BX, AX
	SHR DL, 2
	TEST DL, 03h
	JZ B_POSITIVE
	NEG BL
	B_POSITIVE:
	MOV B_ENC, BL
	
	MOV DL, C
	XOR BH, BH
	MOV BL, DL
	AND BL, 03h
	SHR DL, 2
	MOV AL, DL
	AND AL, 03h
	MOV AH, 3
	MUL AH
	ADD BX, AX
	SHR DL, 2
	MOV AL, DL
	AND AL, 03h
	MOV AH, 9
	MUL AH
	ADD BX, AX
	SHR DL, 2
	TEST DL, 03h
	JZ C_POSITIVE
	NEG BL
	C_POSITIVE:
    MOV C_ENC, BL
	
	POPA
	RET
DECODE_NUMBERS ENDP

INIT_TABLE PROC
	PUSHA
	XOR SI, SI
	MOV CX, 1
	MOV DIGIT, 0
	MOV DIGIT+1, 0
	MOV DIGIT+2, 0			; First digit
	
	INIT_OUTER_LOOP:
	    MOV BL, DIGIT+2
	    SHL BL, 2
	    ADD BL, DIGIT+1
	    SHL BL, 2
	    ADD BL, DIGIT		; BL contains the ternary digit 
		MOV DX, CX
		INIT_INNER_LOOP:
		    MOV TAB[SI], BL
			INC SI
			CMP SI, TABLE_SIZE
			JAE END_INIT
			LOOP INIT_INNER_LOOP
		
		; Next digit
		INC DIGIT
		CMP DIGIT, 3
		JB END_CONVERSION
		MOV DIGIT, 0
		INC DIGIT+1
		CMP DIGIT+1, 3
		JB END_CONVERSION
		MOV DIGIT+1, 0
		INC DIGIT+2
		END_CONVERSION:
		
		MOV CX, DX
		ADD CX, 2		
		CMP SI, TABLE_SIZE
		JB INIT_OUTER_LOOP
	END_INIT:
	POPA
	RET
INIT_TABLE ENDP

END